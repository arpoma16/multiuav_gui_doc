model {
    extend GCS.backend {
        missionManager = component 'Mission Manager' {
            #api
            description 'Mission inspection logic'
        }
        express = component 'REST API & Socket ' {
            #api
            description 'REST API for the backend 
            uses Express and send Telemetry'
        }
        //socket = component 'Websocket'
        events = component 'Events Manager' {

        }
        deviceManager = component 'Device Manager' {
            description 'Process all devices msg & command '
        }
        roslib = component 'ROSLibjs'{
            description 'Convert msg and command 
            to ROS & the other way '
        }
        ftp = component 'File Manager' {
            description 'Download mission files 
            from Devices'
        }

        GCS.ui -> express
        //socket -> GCS.ui 

        express -> deviceManager
        express -> missionManager
        missionManager -> elevationApi.ElevAPI 'HTTP'
        missionManager -> deviceManager
        missionManager -> ftp
        ftp -> device 'FTP'

        deviceManager -> roslib 'Msg & Srv ROS'
        roslib -> deviceManager

        deviceManager -> events 'Create events'
        deviceManager -> GCS.mediamtx 'API REST'

        //events -> socket
        //deviceManager -> socket
        events -> express
        //express -> GCS.ui
        //deviceManager -> express
        roslib -> GCS.Rosbridge 'Send/Recv msg'

        //GCS.Rosbridge -> roslib 'UDP'

    }

}

views {
    view backend of GCS.backend {
        include GCS.ui,
        *,
        GCS,
        -> device

        style GCS {
            color muted
        }

        style GCS.backend {
            color muted
        }
        style GCS.ui {
            color green
            
        }

    }

    view backend_complete of GCS.backend {
        include GCS.ui,
        *,
        GCS,GCS.RosMultimaster,
        -> device

        style GCS {
            color muted
        }

        style GCS.backend {
            color muted
        }
        style GCS.ui {
            color green
            
        }

    }
    view my_backend of GCS.backend {
         include *,
        -> GCS.ui,

        style GCS {
            color muted
        }

        style GCS.backend {
            color muted
        }
        style GCS.ui {
            color green
            
        }
    }
}